// Code generated by MockGen. DO NOT EDIT.
// Source: src/database/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	repository "github.com/MultiBanker/broker/src/database/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositories is a mock of Repositories interface.
type MockRepositories struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesMockRecorder
}

// MockRepositoriesMockRecorder is the mock recorder for MockRepositories.
type MockRepositoriesMockRecorder struct {
	mock *MockRepositories
}

// NewMockRepositories creates a new mock instance.
func NewMockRepositories(ctrl *gomock.Controller) *MockRepositories {
	mock := &MockRepositories{ctrl: ctrl}
	mock.recorder = &MockRepositoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositories) EXPECT() *MockRepositoriesMockRecorder {
	return m.recorder
}

// MarketRepo mocks base method.
func (m *MockRepositories) MarketRepo() repository.Marketer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketRepo")
	ret0, _ := ret[0].(repository.Marketer)
	return ret0
}

// MarketRepo indicates an expected call of MarketRepo.
func (mr *MockRepositoriesMockRecorder) MarketRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketRepo", reflect.TypeOf((*MockRepositories)(nil).MarketRepo))
}

// OfferRepo mocks base method.
func (m *MockRepositories) OfferRepo() repository.Offer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferRepo")
	ret0, _ := ret[0].(repository.Offer)
	return ret0
}

// OfferRepo indicates an expected call of OfferRepo.
func (mr *MockRepositoriesMockRecorder) OfferRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferRepo", reflect.TypeOf((*MockRepositories)(nil).OfferRepo))
}

// OrderRepo mocks base method.
func (m *MockRepositories) OrderRepo() repository.Orderer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderRepo")
	ret0, _ := ret[0].(repository.Orderer)
	return ret0
}

// OrderRepo indicates an expected call of OrderRepo.
func (mr *MockRepositoriesMockRecorder) OrderRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderRepo", reflect.TypeOf((*MockRepositories)(nil).OrderRepo))
}

// PartnerOrderRepo mocks base method.
func (m *MockRepositories) PartnerOrderRepo() repository.PartnerOrderer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartnerOrderRepo")
	ret0, _ := ret[0].(repository.PartnerOrderer)
	return ret0
}

// PartnerOrderRepo indicates an expected call of PartnerOrderRepo.
func (mr *MockRepositoriesMockRecorder) PartnerOrderRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartnerOrderRepo", reflect.TypeOf((*MockRepositories)(nil).PartnerOrderRepo))
}

// PartnerRepo mocks base method.
func (m *MockRepositories) PartnerRepo() repository.Partnerer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartnerRepo")
	ret0, _ := ret[0].(repository.Partnerer)
	return ret0
}

// PartnerRepo indicates an expected call of PartnerRepo.
func (mr *MockRepositoriesMockRecorder) PartnerRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartnerRepo", reflect.TypeOf((*MockRepositories)(nil).PartnerRepo))
}

// SequenceRepo mocks base method.
func (m *MockRepositories) SequenceRepo() repository.Sequencer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SequenceRepo")
	ret0, _ := ret[0].(repository.Sequencer)
	return ret0
}

// SequenceRepo indicates an expected call of SequenceRepo.
func (mr *MockRepositoriesMockRecorder) SequenceRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SequenceRepo", reflect.TypeOf((*MockRepositories)(nil).SequenceRepo))
}
