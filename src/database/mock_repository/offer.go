// Code generated by MockGen. DO NOT EDIT.
// Source: src/database/repository/offer.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	models "github.com/MultiBanker/broker/src/models"
	selector "github.com/MultiBanker/broker/src/models/selector"
	gomock "github.com/golang/mock/gomock"
)

// MockOffer is a mock of Offer interface.
type MockOffer struct {
	ctrl     *gomock.Controller
	recorder *MockOfferMockRecorder
}

// MockOfferMockRecorder is the mock recorder for MockOffer.
type MockOfferMockRecorder struct {
	mock *MockOffer
}

// NewMockOffer creates a new mock instance.
func NewMockOffer(ctrl *gomock.Controller) *MockOffer {
	mock := &MockOffer{ctrl: ctrl}
	mock.recorder = &MockOfferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOffer) EXPECT() *MockOfferMockRecorder {
	return m.recorder
}

// CreateOffer mocks base method.
func (m *MockOffer) CreateOffer(ctx context.Context, offer models.Offer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffer", ctx, offer)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOffer indicates an expected call of CreateOffer.
func (mr *MockOfferMockRecorder) CreateOffer(ctx, offer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffer", reflect.TypeOf((*MockOffer)(nil).CreateOffer), ctx, offer)
}

// OfferByCode mocks base method.
func (m *MockOffer) OfferByCode(ctx context.Context, code string) (models.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferByCode", ctx, code)
	ret0, _ := ret[0].(models.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfferByCode indicates an expected call of OfferByCode.
func (mr *MockOfferMockRecorder) OfferByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferByCode", reflect.TypeOf((*MockOffer)(nil).OfferByCode), ctx, code)
}

// Offers mocks base method.
func (m *MockOffer) Offers(ctx context.Context, paging selector.Paging) ([]models.Offer, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offers", ctx, paging)
	ret0, _ := ret[0].([]models.Offer)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Offers indicates an expected call of Offers.
func (mr *MockOfferMockRecorder) Offers(ctx, paging interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offers", reflect.TypeOf((*MockOffer)(nil).Offers), ctx, paging)
}

// OffersByTotalSum mocks base method.
func (m *MockOffer) OffersByTotalSum(ctx context.Context, total int) ([]*models.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OffersByTotalSum", ctx, total)
	ret0, _ := ret[0].([]*models.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OffersByTotalSum indicates an expected call of OffersByTotalSum.
func (mr *MockOfferMockRecorder) OffersByTotalSum(ctx, total interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OffersByTotalSum", reflect.TypeOf((*MockOffer)(nil).OffersByTotalSum), ctx, total)
}

// UpdateOffer mocks base method.
func (m *MockOffer) UpdateOffer(ctx context.Context, offer models.Offer) (models.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffer", ctx, offer)
	ret0, _ := ret[0].(models.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOffer indicates an expected call of UpdateOffer.
func (mr *MockOfferMockRecorder) UpdateOffer(ctx, offer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffer", reflect.TypeOf((*MockOffer)(nil).UpdateOffer), ctx, offer)
}
