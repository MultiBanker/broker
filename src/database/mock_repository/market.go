// Code generated by MockGen. DO NOT EDIT.
// Source: src/database/repository/market.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	models "github.com/MultiBanker/broker/src/models"
	selector "github.com/MultiBanker/broker/src/models/selector"
	gomock "github.com/golang/mock/gomock"
)

// MockMarketer is a mock of Marketer interface.
type MockMarketer struct {
	ctrl     *gomock.Controller
	recorder *MockMarketerMockRecorder
}

// MockMarketerMockRecorder is the mock recorder for MockMarketer.
type MockMarketerMockRecorder struct {
	mock *MockMarketer
}

// NewMockMarketer creates a new mock instance.
func NewMockMarketer(ctrl *gomock.Controller) *MockMarketer {
	mock := &MockMarketer{ctrl: ctrl}
	mock.recorder = &MockMarketerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketer) EXPECT() *MockMarketerMockRecorder {
	return m.recorder
}

// CreateMarket mocks base method.
func (m *MockMarketer) CreateMarket(ctx context.Context, market models.Market) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMarket", ctx, market)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMarket indicates an expected call of CreateMarket.
func (mr *MockMarketerMockRecorder) CreateMarket(ctx, market interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMarket", reflect.TypeOf((*MockMarketer)(nil).CreateMarket), ctx, market)
}

// MarketByCode mocks base method.
func (m *MockMarketer) MarketByCode(ctx context.Context, code string) (models.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketByCode", ctx, code)
	ret0, _ := ret[0].(models.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketByCode indicates an expected call of MarketByCode.
func (mr *MockMarketerMockRecorder) MarketByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketByCode", reflect.TypeOf((*MockMarketer)(nil).MarketByCode), ctx, code)
}

// MarketByID mocks base method.
func (m *MockMarketer) MarketByID(ctx context.Context, id string) (models.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketByID", ctx, id)
	ret0, _ := ret[0].(models.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketByID indicates an expected call of MarketByID.
func (mr *MockMarketerMockRecorder) MarketByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketByID", reflect.TypeOf((*MockMarketer)(nil).MarketByID), ctx, id)
}

// MarketByUsername mocks base method.
func (m *MockMarketer) MarketByUsername(ctx context.Context, username string) (models.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketByUsername", ctx, username)
	ret0, _ := ret[0].(models.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketByUsername indicates an expected call of MarketByUsername.
func (mr *MockMarketerMockRecorder) MarketByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketByUsername", reflect.TypeOf((*MockMarketer)(nil).MarketByUsername), ctx, username)
}

// Markets mocks base method.
func (m *MockMarketer) Markets(ctx context.Context, paging selector.Paging) ([]models.Market, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Markets", ctx, paging)
	ret0, _ := ret[0].([]models.Market)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Markets indicates an expected call of Markets.
func (mr *MockMarketerMockRecorder) Markets(ctx, paging interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Markets", reflect.TypeOf((*MockMarketer)(nil).Markets), ctx, paging)
}

// UpdateMarket mocks base method.
func (m *MockMarketer) UpdateMarket(ctx context.Context, market models.Market) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMarket", ctx, market)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMarket indicates an expected call of UpdateMarket.
func (mr *MockMarketerMockRecorder) UpdateMarket(ctx, market interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMarket", reflect.TypeOf((*MockMarketer)(nil).UpdateMarket), ctx, market)
}
