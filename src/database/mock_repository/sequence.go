// Code generated by MockGen. DO NOT EDIT.
// Source: src/database/repository/sequence.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSequencer is a mock of Sequencer interface.
type MockSequencer struct {
	ctrl     *gomock.Controller
	recorder *MockSequencerMockRecorder
}

// MockSequencerMockRecorder is the mock recorder for MockSequencer.
type MockSequencerMockRecorder struct {
	mock *MockSequencer
}

// NewMockSequencer creates a new mock instance.
func NewMockSequencer(ctrl *gomock.Controller) *MockSequencer {
	mock := &MockSequencer{ctrl: ctrl}
	mock.recorder = &MockSequencerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequencer) EXPECT() *MockSequencerMockRecorder {
	return m.recorder
}

// NewSequence mocks base method.
func (m *MockSequencer) NewSequence(ctx context.Context, sequenceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSequence", ctx, sequenceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewSequence indicates an expected call of NewSequence.
func (mr *MockSequencerMockRecorder) NewSequence(ctx, sequenceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSequence", reflect.TypeOf((*MockSequencer)(nil).NewSequence), ctx, sequenceName)
}

// NextSequenceValue mocks base method.
func (m *MockSequencer) NextSequenceValue(ctx context.Context, sequenceName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextSequenceValue", ctx, sequenceName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextSequenceValue indicates an expected call of NextSequenceValue.
func (mr *MockSequencerMockRecorder) NextSequenceValue(ctx, sequenceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextSequenceValue", reflect.TypeOf((*MockSequencer)(nil).NextSequenceValue), ctx, sequenceName)
}
