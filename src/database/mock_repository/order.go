// Code generated by MockGen. DO NOT EDIT.
// Source: src/database/repository/order.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	models "github.com/MultiBanker/broker/src/models"
	selector "github.com/MultiBanker/broker/src/models/selector"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderer is a mock of Orderer interface.
type MockOrderer struct {
	ctrl     *gomock.Controller
	recorder *MockOrdererMockRecorder
}

// MockOrdererMockRecorder is the mock recorder for MockOrderer.
type MockOrdererMockRecorder struct {
	mock *MockOrderer
}

// NewMockOrderer creates a new mock instance.
func NewMockOrderer(ctrl *gomock.Controller) *MockOrderer {
	mock := &MockOrderer{ctrl: ctrl}
	mock.recorder = &MockOrdererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderer) EXPECT() *MockOrdererMockRecorder {
	return m.recorder
}

// NewOrder mocks base method.
func (m *MockOrderer) NewOrder(ctx context.Context, order *models.Order) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOrder", ctx, order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewOrder indicates an expected call of NewOrder.
func (mr *MockOrdererMockRecorder) NewOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOrder", reflect.TypeOf((*MockOrderer)(nil).NewOrder), ctx, order)
}

// OrderByID mocks base method.
func (m *MockOrderer) OrderByID(ctx context.Context, id string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderByID", ctx, id)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderByID indicates an expected call of OrderByID.
func (mr *MockOrdererMockRecorder) OrderByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByID", reflect.TypeOf((*MockOrderer)(nil).OrderByID), ctx, id)
}

// Orders mocks base method.
func (m *MockOrderer) Orders(ctx context.Context, paging *selector.Paging) ([]*models.Order, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Orders", ctx, paging)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Orders indicates an expected call of Orders.
func (mr *MockOrdererMockRecorder) Orders(ctx, paging interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Orders", reflect.TypeOf((*MockOrderer)(nil).Orders), ctx, paging)
}

// OrdersByReferenceID mocks base method.
func (m *MockOrderer) OrdersByReferenceID(ctx context.Context, referenceID string) ([]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersByReferenceID indicates an expected call of OrdersByReferenceID.
func (mr *MockOrdererMockRecorder) OrdersByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersByReferenceID", reflect.TypeOf((*MockOrderer)(nil).OrdersByReferenceID), ctx, referenceID)
}

// UpdateOrder mocks base method.
func (m *MockOrderer) UpdateOrder(ctx context.Context, order *models.Order) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrdererMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderer)(nil).UpdateOrder), ctx, order)
}

// MockPartnerOrderer is a mock of PartnerOrderer interface.
type MockPartnerOrderer struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerOrdererMockRecorder
}

// MockPartnerOrdererMockRecorder is the mock recorder for MockPartnerOrderer.
type MockPartnerOrdererMockRecorder struct {
	mock *MockPartnerOrderer
}

// NewMockPartnerOrderer creates a new mock instance.
func NewMockPartnerOrderer(ctrl *gomock.Controller) *MockPartnerOrderer {
	mock := &MockPartnerOrderer{ctrl: ctrl}
	mock.recorder = &MockPartnerOrdererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerOrderer) EXPECT() *MockPartnerOrdererMockRecorder {
	return m.recorder
}

// NewOrder mocks base method.
func (m *MockPartnerOrderer) NewOrder(ctx context.Context, order models.PartnerOrder) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOrder", ctx, order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewOrder indicates an expected call of NewOrder.
func (mr *MockPartnerOrdererMockRecorder) NewOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOrder", reflect.TypeOf((*MockPartnerOrderer)(nil).NewOrder), ctx, order)
}

// OrderPartner mocks base method.
func (m *MockPartnerOrderer) OrderPartner(ctx context.Context, referenceID, partnerCode string) (models.PartnerOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderPartner", ctx, referenceID, partnerCode)
	ret0, _ := ret[0].(models.PartnerOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderPartner indicates an expected call of OrderPartner.
func (mr *MockPartnerOrdererMockRecorder) OrderPartner(ctx, referenceID, partnerCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderPartner", reflect.TypeOf((*MockPartnerOrderer)(nil).OrderPartner), ctx, referenceID, partnerCode)
}

// OrdersByReferenceID mocks base method.
func (m *MockPartnerOrderer) OrdersByReferenceID(ctx context.Context, marketCode, referenceID string) ([]*models.PartnerOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersByReferenceID", ctx, marketCode, referenceID)
	ret0, _ := ret[0].([]*models.PartnerOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersByReferenceID indicates an expected call of OrdersByReferenceID.
func (mr *MockPartnerOrdererMockRecorder) OrdersByReferenceID(ctx, marketCode, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersByReferenceID", reflect.TypeOf((*MockPartnerOrderer)(nil).OrdersByReferenceID), ctx, marketCode, referenceID)
}

// UpdateInitStatusByTimeOut mocks base method.
func (m *MockPartnerOrderer) UpdateInitStatusByTimeOut(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInitStatusByTimeOut", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInitStatusByTimeOut indicates an expected call of UpdateInitStatusByTimeOut.
func (mr *MockPartnerOrdererMockRecorder) UpdateInitStatusByTimeOut(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInitStatusByTimeOut", reflect.TypeOf((*MockPartnerOrderer)(nil).UpdateInitStatusByTimeOut), ctx)
}

// UpdateOrder mocks base method.
func (m *MockPartnerOrderer) UpdateOrder(ctx context.Context, order models.PartnerOrder) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockPartnerOrdererMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockPartnerOrderer)(nil).UpdateOrder), ctx, order)
}
