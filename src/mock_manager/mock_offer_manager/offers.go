// Code generated by MockGen. DO NOT EDIT.
// Source: src/manager/offer/offers.go

// Package mock_offer is a generated GoMock package.
package mock_offer

import (
	context "context"
	reflect "reflect"

	models "github.com/MultiBanker/broker/src/models"
	selector "github.com/MultiBanker/broker/src/models/selector"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CreateOffer mocks base method.
func (m *MockManager) CreateOffer(ctx context.Context, offer models.Offer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffer", ctx, offer)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOffer indicates an expected call of CreateOffer.
func (mr *MockManagerMockRecorder) CreateOffer(ctx, offer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffer", reflect.TypeOf((*MockManager)(nil).CreateOffer), ctx, offer)
}

// OfferByCode mocks base method.
func (m *MockManager) OfferByCode(ctx context.Context, code string) (models.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferByCode", ctx, code)
	ret0, _ := ret[0].(models.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfferByCode indicates an expected call of OfferByCode.
func (mr *MockManagerMockRecorder) OfferByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferByCode", reflect.TypeOf((*MockManager)(nil).OfferByCode), ctx, code)
}

// Offers mocks base method.
func (m *MockManager) Offers(ctx context.Context, paging selector.Paging) ([]models.Offer, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offers", ctx, paging)
	ret0, _ := ret[0].([]models.Offer)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Offers indicates an expected call of Offers.
func (mr *MockManagerMockRecorder) Offers(ctx, paging interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offers", reflect.TypeOf((*MockManager)(nil).Offers), ctx, paging)
}

// OffersByGoods mocks base method.
func (m *MockManager) OffersByGoods(ctx context.Context, goods []*models.Goods) ([]*models.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OffersByGoods", ctx, goods)
	ret0, _ := ret[0].([]*models.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OffersByGoods indicates an expected call of OffersByGoods.
func (mr *MockManagerMockRecorder) OffersByGoods(ctx, goods interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OffersByGoods", reflect.TypeOf((*MockManager)(nil).OffersByGoods), ctx, goods)
}

// UpdateOffer mocks base method.
func (m *MockManager) UpdateOffer(ctx context.Context, offer models.Offer) (models.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffer", ctx, offer)
	ret0, _ := ret[0].(models.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOffer indicates an expected call of UpdateOffer.
func (mr *MockManagerMockRecorder) UpdateOffer(ctx, offer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffer", reflect.TypeOf((*MockManager)(nil).UpdateOffer), ctx, offer)
}
