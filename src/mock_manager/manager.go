// Code generated by MockGen. DO NOT EDIT.
// Source: src/manager/manager.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	reflect "reflect"

	auth "github.com/MultiBanker/broker/src/manager/auth"
	market "github.com/MultiBanker/broker/src/manager/market"
	offer "github.com/MultiBanker/broker/src/manager/offer"
	order "github.com/MultiBanker/broker/src/manager/order"
	partner "github.com/MultiBanker/broker/src/manager/partner"
	metrics "github.com/VictoriaMetrics/metrics"
	gomock "github.com/golang/mock/gomock"
)

// MockAbstractor is a mock of Abstractor interface.
type MockAbstractor struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractorMockRecorder
}

// MockAbstractorMockRecorder is the mock recorder for MockAbstractor.
type MockAbstractorMockRecorder struct {
	mock *MockAbstractor
}

// NewMockAbstractor creates a new mock instance.
func NewMockAbstractor(ctrl *gomock.Controller) *MockAbstractor {
	mock := &MockAbstractor{ctrl: ctrl}
	mock.recorder = &MockAbstractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstractor) EXPECT() *MockAbstractorMockRecorder {
	return m.recorder
}

// Auther mocks base method.
func (m *MockAbstractor) Auther() auth.Authenticator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auther")
	ret0, _ := ret[0].(auth.Authenticator)
	return ret0
}

// Auther indicates an expected call of Auther.
func (mr *MockAbstractorMockRecorder) Auther() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auther", reflect.TypeOf((*MockAbstractor)(nil).Auther))
}

// Marketer mocks base method.
func (m *MockAbstractor) Marketer() market.Marketer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marketer")
	ret0, _ := ret[0].(market.Marketer)
	return ret0
}

// Marketer indicates an expected call of Marketer.
func (mr *MockAbstractorMockRecorder) Marketer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marketer", reflect.TypeOf((*MockAbstractor)(nil).Marketer))
}

// Metric mocks base method.
func (m *MockAbstractor) Metric() *metrics.Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metric")
	ret0, _ := ret[0].(*metrics.Set)
	return ret0
}

// Metric indicates an expected call of Metric.
func (mr *MockAbstractorMockRecorder) Metric() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metric", reflect.TypeOf((*MockAbstractor)(nil).Metric))
}

// Offer mocks base method.
func (m *MockAbstractor) Offer() offer.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offer")
	ret0, _ := ret[0].(offer.Manager)
	return ret0
}

// Offer indicates an expected call of Offer.
func (mr *MockAbstractorMockRecorder) Offer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offer", reflect.TypeOf((*MockAbstractor)(nil).Offer))
}

// Orderer mocks base method.
func (m *MockAbstractor) Orderer() order.Orderer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Orderer")
	ret0, _ := ret[0].(order.Orderer)
	return ret0
}

// Orderer indicates an expected call of Orderer.
func (mr *MockAbstractorMockRecorder) Orderer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Orderer", reflect.TypeOf((*MockAbstractor)(nil).Orderer))
}

// Partnerer mocks base method.
func (m *MockAbstractor) Partnerer() partner.Partnerer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Partnerer")
	ret0, _ := ret[0].(partner.Partnerer)
	return ret0
}

// Partnerer indicates an expected call of Partnerer.
func (mr *MockAbstractorMockRecorder) Partnerer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Partnerer", reflect.TypeOf((*MockAbstractor)(nil).Partnerer))
}

// Pinger mocks base method.
func (m *MockAbstractor) Pinger() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pinger")
	ret0, _ := ret[0].(error)
	return ret0
}

// Pinger indicates an expected call of Pinger.
func (mr *MockAbstractorMockRecorder) Pinger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pinger", reflect.TypeOf((*MockAbstractor)(nil).Pinger))
}
