// Code generated by MockGen. DO NOT EDIT.
// Source: src/manager/partner/partner.go

// Package mock_partner is a generated GoMock package.
package mock_partner

import (
	context "context"
	reflect "reflect"

	models "github.com/MultiBanker/broker/src/models"
	selector "github.com/MultiBanker/broker/src/models/selector"
	gomock "github.com/golang/mock/gomock"
)

// MockPartnerer is a mock of Partnerer interface.
type MockPartnerer struct {
	ctrl     *gomock.Controller
	recorder *MockPartnererMockRecorder
}

// MockPartnererMockRecorder is the mock recorder for MockPartnerer.
type MockPartnererMockRecorder struct {
	mock *MockPartnerer
}

// NewMockPartnerer creates a new mock instance.
func NewMockPartnerer(ctrl *gomock.Controller) *MockPartnerer {
	mock := &MockPartnerer{ctrl: ctrl}
	mock.recorder = &MockPartnererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerer) EXPECT() *MockPartnererMockRecorder {
	return m.recorder
}

// NewPartner mocks base method.
func (m *MockPartnerer) NewPartner(ctx context.Context, partner *models.Partner) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPartner", ctx, partner)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPartner indicates an expected call of NewPartner.
func (mr *MockPartnererMockRecorder) NewPartner(ctx, partner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPartner", reflect.TypeOf((*MockPartnerer)(nil).NewPartner), ctx, partner)
}

// PartnerByID mocks base method.
func (m *MockPartnerer) PartnerByID(ctx context.Context, id string) (models.Partner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartnerByID", ctx, id)
	ret0, _ := ret[0].(models.Partner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartnerByID indicates an expected call of PartnerByID.
func (mr *MockPartnererMockRecorder) PartnerByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartnerByID", reflect.TypeOf((*MockPartnerer)(nil).PartnerByID), ctx, id)
}

// PartnerByUsername mocks base method.
func (m *MockPartnerer) PartnerByUsername(ctx context.Context, username, password string) (models.Partner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartnerByUsername", ctx, username, password)
	ret0, _ := ret[0].(models.Partner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartnerByUsername indicates an expected call of PartnerByUsername.
func (mr *MockPartnererMockRecorder) PartnerByUsername(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartnerByUsername", reflect.TypeOf((*MockPartnerer)(nil).PartnerByUsername), ctx, username, password)
}

// Partners mocks base method.
func (m *MockPartnerer) Partners(ctx context.Context, paging *selector.Paging) ([]models.Partner, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Partners", ctx, paging)
	ret0, _ := ret[0].([]models.Partner)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Partners indicates an expected call of Partners.
func (mr *MockPartnererMockRecorder) Partners(ctx, paging interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Partners", reflect.TypeOf((*MockPartnerer)(nil).Partners), ctx, paging)
}

// UpdatePartner mocks base method.
func (m *MockPartnerer) UpdatePartner(ctx context.Context, partner *models.Partner) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartner", ctx, partner)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartner indicates an expected call of UpdatePartner.
func (mr *MockPartnererMockRecorder) UpdatePartner(ctx, partner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartner", reflect.TypeOf((*MockPartnerer)(nil).UpdatePartner), ctx, partner)
}
