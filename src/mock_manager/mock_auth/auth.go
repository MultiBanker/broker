// Code generated by MockGen. DO NOT EDIT.
// Source: src/manager/auth/auth.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	jwtauth "github.com/go-chi/jwtauth/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// AccessToken mocks base method.
func (m *MockAuthenticator) AccessToken(id, role, code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessToken", id, role, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessToken indicates an expected call of AccessToken.
func (mr *MockAuthenticatorMockRecorder) AccessToken(id, role, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessToken", reflect.TypeOf((*MockAuthenticator)(nil).AccessToken), id, role, code)
}

// JWTKey mocks base method.
func (m *MockAuthenticator) JWTKey() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWTKey")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// JWTKey indicates an expected call of JWTKey.
func (mr *MockAuthenticatorMockRecorder) JWTKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWTKey", reflect.TypeOf((*MockAuthenticator)(nil).JWTKey))
}

// RefreshToken mocks base method.
func (m *MockAuthenticator) RefreshToken(id, role, code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", id, role, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthenticatorMockRecorder) RefreshToken(id, role, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthenticator)(nil).RefreshToken), id, role, code)
}

// TokenAuth mocks base method.
func (m *MockAuthenticator) TokenAuth() *jwtauth.JWTAuth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenAuth")
	ret0, _ := ret[0].(*jwtauth.JWTAuth)
	return ret0
}

// TokenAuth indicates an expected call of TokenAuth.
func (mr *MockAuthenticatorMockRecorder) TokenAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenAuth", reflect.TypeOf((*MockAuthenticator)(nil).TokenAuth))
}

// Tokens mocks base method.
func (m *MockAuthenticator) Tokens(id, role, code string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tokens", id, role, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Tokens indicates an expected call of Tokens.
func (mr *MockAuthenticatorMockRecorder) Tokens(id, role, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tokens", reflect.TypeOf((*MockAuthenticator)(nil).Tokens), id, role, code)
}
